var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CRRao","category":"page"},{"location":"#CRRao","page":"Home","title":"CRRao","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CRRao.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CRRao]","category":"page"},{"location":"#CRRao.fitmodel-Tuple{StatsModels.FormulaTerm, DataFrames.DataFrame, LinearRegression}","page":"Home","title":"CRRao.fitmodel","text":"CRRao is a Julia package that implements the Statistical models. The implementation     of Statistical models become straightforward for most Julia users     with the help of this package. This is going to be wrapper package;    leveraging the strength of wonderful Julia packages that already exists,     such as StatsBase,     StatsModels, Distributions,GLM, Turing, DataFrames,    LinearAlgebra, etc.\n\nNote: You can read more about Prof C.R. Rao Click Here\n\nCRRao needs six inputs to fit (or train) a model.\n\nInput:\n\nformula (explain relationship between the variables)\n\ny~x1+x2+...\n\ndata : it will contain y and X, typically DataFrames (Notes: Currently it only works on DataFrames)\nmodel class: provide name of the model class. For example: LinearRegression  , LogisticRegression, PoissonRegression, ARIMA, etc.\n\nNote: Detail of the model class is provided below.\n\nprior distribution\n\nprovide prior distribution if you want to implement Bayesian models. \nLeave it blank if you want to implement classical likelihood models.\n\nlink\n\nProvide appropriate link function for GLM models\n\nSyntax\n\nformula Provide the equation\ndata Provide DataFrame\nmodelClass Provide the name of the class of model. Default is \"LinearReg\". Other classes are \"LogisticReg\" for logistic regression, \"CountReg\" for count regression etc.\nPriorMod Provide the prior model or prior distributions on parameters. \nLink Provide the link function for GLM \nh Provide the value of h for Ridge prior, where h>0. If h is close to 0, the the Ridge prior contain no-information. It will be non-informative flat prior. But if you want your Ridge prior to have effect and correct for multicollinearity, then you should try some positive value for h. Effectively it assigns beta ~ N(0 , 1/h) as prior on unknown coefficients.\nlevel assign level for confidence interval\nsim_size Provide value for simulation size for MCMC method.\n\n\nJulia> using RDatasets, StatsModels, StatsPlots, NLSolversBase\n\n \n## Example: Linear Regression\n\nJulia> df = dataset(\"datasets\", \"mtcars\");\n\nJulia> model = fitmodel(@formula(MPG ~ HP + WT+Gear),df,LinearRegression());\n\nJulia> model.fit\n\n────────────────────────────────────────────────────────────────────────────\n                  Coef.  Std. Error      t  Pr(>|t|)   Lower 95%   Upper 95%\n────────────────────────────────────────────────────────────────────────────\n(Intercept)  32.0137     4.63226      6.91    <1e-06  22.5249     41.5024\nHP           -0.0367861  0.00989146  -3.72    0.0009  -0.0570478  -0.0165243\nWT           -3.19781    0.846546    -3.78    0.0008  -4.93188    -1.46374\nGear          1.01998    0.851408     1.20    0.2410  -0.72405     2.76401\n────────────────────────────────────────────────────────────────────────────\n\nJulia> model.sigma\n2.5741691724978977\n\nJulia> model.LogLike\n-73.52638935960971\n\nJulia> model.AIC\n157.05277871921942\n\nJulia> model.BIC\n164.38145823321804\n\nJulia> model.R_sqr\n0.8352309600685555\n\nJulia> model.Adjusted_R_sqr\n0.8175771343616149\n\nJulia> model.fittedResponse\n32-element Vector{Float64}:\n 23.66884995233871\n 22.85340824320635\n 25.25355614074087\n 20.746171762311327\n 17.635570543830113\n ...\n\nJulia> model.residuals\n32-element Vector{Float64}:\n -2.668849952338711\n -1.8534082432063492\n -2.4535561407408686\n  0.6538282376886713\n  ...\n\nJulia> model.Cooks_distance\n32-element Vector{Float64}:\n 0.013342034282302845\n 0.00688728266731234\n 0.015495847517058972\n ...\n\nJulia> plot(model.Cooks_distance)\n\n## Example: Bayesian Linear Regression with Ridge Prior\n\n\nJulia> model = fitmodel(@formula(MPG ~ HP + WT+Gear),df,LinearRegression(),Prior_Ridge());\n\n┌ Info: Found initial step size\n└   ϵ = 0.003125\n\nJulia> model.summaries\nSummary Statistics\n  parameters      mean       std   naive_se      mcse         ess      rhat   ess_per_sec \n      Symbol   Float64   Float64    Float64   Float64     Float64   Float64       Float64 \n\n           v    6.8184    3.8850     0.0388    0.0680   3316.5165    1.0003      266.6868\n           σ    2.6816    0.3879     0.0039    0.0064   3526.9739    1.0003      283.6100\n           α   28.4108    5.5547     0.0555    0.1075   2390.7583    1.0009      192.2450\n        β[1]   -0.0402    0.0107     0.0001    0.0002   3503.1094    1.0008      281.6910\n        β[2]   -2.6507    0.9780     0.0098    0.0189   2486.6245    1.0008      199.9537\n        β[3]    1.6426    1.0086     0.0101    0.0189   2522.2853    1.0011      202.8213\n\n## All rhat values are close to 1; indicates convergence of Markov Chain.\n\n\n### LogisticReg - GLM with Scoring Method\n\nJulia> turnout = dataset(\"Zelig\", \"turnout\")\n\nJulia> model = fitmodel(@formula(Vote ~ Age + Race +Income + Educate)\n                ,turnout,LogisticRegression(),Logit());\n\nJulia> model.fit\n\n────────────────────────────────────────────────────────────────────────────\n                  Coef.  Std. Error      z  Pr(>|z|)   Lower 95%   Upper 95%\n────────────────────────────────────────────────────────────────────────────\n(Intercept)  -3.03426    0.325927    -9.31    <1e-19  -3.67307    -2.39546\nAge           0.0283543  0.00346034   8.19    <1e-15   0.0215722   0.0351365\nRace: white   0.250798   0.146457     1.71    0.0868  -0.0362521   0.537847\nIncome        0.177112   0.0271516    6.52    <1e-10   0.123896    0.230328\nEducate       0.175634   0.0203308    8.64    <1e-17   0.135786    0.215481\n────────────────────────────────────────────────────────────────────────────\n\nJulia> model.LogLike\n-1011.9906318515576\n\nJulia> model.AIC\n2033.9812637031152\n\n\n\n\n\n\n\n","category":"method"}]
}
