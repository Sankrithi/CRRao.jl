var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CRRao","category":"page"},{"location":"#CRRao","page":"Home","title":"CRRao","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CRRao.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CRRao]","category":"page"},{"location":"#CRRao.fitmodel","page":"Home","title":"CRRao.fitmodel","text":"CRRao function implements the Statistical models. The implementation     of Statistical models become straightforward for most Julia users     with the help of this package. This is going to be wrapper package;    leveraging the strength of wonderful Julia packages that already exists,     such as StatsBase,     StatsModels, Distributions,GLM, Turing, DataFrames,    LinearAlgebra, etc.\n\nNote: You can read more about Prof C.R. Rao Click Here\n\nCRRao needs six inputs to fit (or train) a model.\n\nInput:\n\nformula (explain relationship between the variables)\n\ny~x1+x2+...\n\ndata : it will contain y and X, typically DataFrames (Notes: Currently it only works on DataFrames)\nmodel class: provide name of the model class. For example: lm, logistic, poisson, ARIMA, etc.\n\nNote: Detail of the model class is provided below.\n\ndistribution\n\ndata model or likelihood model\nprior (if NULL - non-informative flat prior is default. In that case the estimates will be MLE.)\n\nlink\n\nProvide appropriate link function\n\nfitting methodology :\n\nOptimization (Package Dependence: Optim, GLM)\nMCMC (Package Dependence: Turing, Soss)\nBootstrap\n\nSyntax\n\nCRRao(formula::FormulaTerm, data::DataFrame, modelClass=\"LinearReg\", LikelihoodMod=\"Gauss\", PriorMod=\"NIP\", Link::String=\"Identity\"\n       , ComputeMethod::String=\"Optimization\", h::Float64=0.01,level::Real=0.95, sim_size::Int64=10000)\n\n\nformula Provide the equation\ndata Provide DataFrame\nmodelClass Provide the name of the class of model. Default is \"LinearReg\". Other classes are \"LogisticReg\" for logistic regression, \"CountReg\" for count regression etc.\nLikelihoodMod Provide the likelihood model (aka., data model). Default is \"Gauss\" for Gaussian distribution.\nPriorMod Provide the prior model or prior distributions on parameters. Default is NIP, i.e., \"Non-Informative Prior\" aka. \"Flat Prior\"\nLink Provide the link function. Default is \"Identity\".\nComputeMethod Provide the computational methods. Default is \"Optimization\". Other methods are MCMC and Bootstrap. The MCMC method implements the NUTS algorithm of Hamiltonian Monte Carlo class. The Bootstrap method is under development.\nh Provide the value of h for Ridge prior, where h>0. If h is close to 0, the the Ridge prior contain no-information. It will be non-informative flat prior. But if you want your Ridge prior to have effect and correct for multicollinearity, then you should try some positive value for h. Effectively it assigns beta ~ N(0 , 1/h) as prior on unknown coefficients.\nlevel assign level for confidence interval\nsim_size Provide value for simulation size for MCMC method.\n\n\n\n\n\n","category":"function"}]
}
